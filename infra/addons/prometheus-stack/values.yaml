<<<<<<< HEAD
prometheusOperator:
  enabled: true
prometheus:
  enabled: true
  prometheusSpec:
    replicas: 1
    service:
      type: ClusterIP
      port: 9090
    kubeControllerManager:
      enabled: true
      scheme: http
      serviceMonitor:
        scheme: http
        insecureSkipVerify: true
      endpoints:
        - 10252
    kubeScheduler:
      enabled: true
      scheme: http
      serviceMonitor:
        scheme: http
        insecureSkipVerify: true
      endpoints:
        - 10249
    kubeProxy:
      enabled: true
      scheme: http
      serviceMonitor:
        scheme: http
        insecureSkipVerify: true
      endpoints:
        - 10249
    kubeEtcd:
      enabled: true
      scheme: http
      serviceMonitor:
        scheme: http
        insecureSkipVerify: true
      endpoints:
        - 2381
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector:
      matchLabels:
        release: prometheus-stack-dev
    podMonitorSelector:
      matchLabels:
        prometheus: prometheus-stack
    resources:
      requests:
        cpu: "200m"
        memory: "1Gi"
      limits:
        memory: "2Gi"
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi


grafana:
  enabled: true
  adminPassword: newpassword123
  persistence:
    enabled: true
    storageClassName: standard
    accessModes: ["ReadWriteOnce"]
    size: 5Gi
  grafana.ini:
    server:
      domain: grafana.sharkapp.local
      root_url: http://grafana.sharkapp.local:30931/
    auth.anonymous:
      enabled: true
      org_role: Viewer
  additionalDataSources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus-operated.monitoring.svc.cluster.local:9090
      access: proxy
      isDefault: true
    - name: Loki
      type: loki
      url: http://loki.dev.svc.cluster.local:3100
      access: proxy
      isDefault: false
    - name: Tempo
      type: tempo
      url: http://grafana-tempo-dev.dev.svc.cluster.local:3100
      access: proxy
      isDefault: false
      jsonData:
        httpMethod: GET
        tracesToLogs:
          datasourceUid: "loki"
          spanStartTimeShift: "-1h"
          spanEndTimeShift: "1h"
        tracesToMetrics:
          datasourceUid: "prometheus"
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
      nginx.ingress.kubernetes.io/proxy-buffers: "4 256k"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    hosts:
      - grafana.sharkapp.local
    paths:
      - path: /
        pathType: Prefix
  service:
    type: ClusterIP
    port: 80

kube-prometheus-stack:
  crds:
    enabled: true

prometheus-node-exporter:
  enabled: true


app:
  serviceMonitors: []
# app:
#   serviceMonitors:
#     - name: sharkapp-frontend
#       namespace: dev
#       selector:
#         matchLabels:
#           app.kubernetes.io/instance: frontend-dev
#           app.kubernetes.io/name: frontend
#       additionalLabels:  # Ensure the label matches the selector
#         release: prometheus-stack-dev
#       endpoints:
#         - port: http
#           path: /metrics
#           interval: 15s
#           targetPort: 8000
#           relabelings:
#             - action: replace
#               sourceLabels:
#               - __meta_kubernetes_pod_namespace
#               targetLabel: namespace
#     - name: sharkapp-backend
#       namespace: dev
#       selector:
#         matchLabels:
#           app.kubernetes.io/instance: backend-dev  # Match the service label
#           app.kubernetes.io/name: backend
#       additionalLabels:
#         release: prometheus-stack-dev
#       endpoints:
#         - port: http
#           path: /metrics
#           interval: 15s
#           targetPort: 8000
#           relabelings:
#             - action: replace
#               sourceLabels:
#               - __meta_kubernetes_pod_namespace
#               targetLabel: namespace
#     - name: process-exporter
#       namespace: dev
#       selector:
#         matchLabels:
#           app: process-exporter
#       additionalLabels:
#         release: prometheus-stack-dev
#       endpoints:
#         - port: metrics
#           path: /metrics
#           interval: 15s
#           relabelings:
#             - action: replace
#               sourceLabels:
#               - __meta_kubernetes_pod_namespace
#               targetLabel: namespace
=======
# Default configuration for prometheus-stack
# This will be overridden by environment-specific values

# Grafana hostname - will be overridden per environment
grafanaHost: "localhost"

# Application monitoring (empty by default)
app:
  serviceMonitors: []

# Configuration for the kube-prometheus-stack subchart
kube-prometheus-stack:
  # Prometheus server configuration
  prometheus:
    enabled: true
    prometheusSpec:
      retention: "15d"  # Keep metrics for 15 days
      resources:
        requests:
          cpu: "100m"
          memory: "512Mi"
        limits:
          cpu: "500m"
          memory: "1Gi"
  
  # Grafana dashboard configuration
  grafana:
    enabled: true
    adminPassword: "admin123"  # Will be overridden per environment
    service:
      type: ClusterIP
      port: 80
    grafana.ini:
      server:
        domain: "localhost"
        root_url: "http://localhost/"
  
  # Disable alertmanager for simplicity
  alertmanager:
    enabled: false
  
  # Enable node metrics collection
  prometheus-node-exporter:
    enabled: true
  
  # Enable Kubernetes state metrics
  kube-state-metrics:
    enabled: true
>>>>>>> 10efdd97221964535597c2e8cecef16614e283e2
